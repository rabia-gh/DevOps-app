pipeline {
 agent any
 environment {
     mvnHome = tool name: 'maven', type: 'maven'
     mvnCMD = "${mvnHome}/bin/mvn"
     
     // variables for code analysis
     
    // SONARQUBE_URL = "http://172.31.140.193"
     SONARQUBE_URL = "http://192.168.179.131"
     SONARQUBE_PORT = "9000"
     
     // variables for tomcat in dev stage deployment
     
     //tomcatIp = "192.168.179.131"
     //tomcatUser = 'rabiaa'
     //stopTomcat = "ssh ${tomcatUser}@${tomcatIp} /opt/tomcat8/bin/shutdown.sh"
     //startTomcat = "ssh ${tomcatUser}@${tomcatIp} /opt/tomcat8/bin/startup.sh"
     //copyWar = "scp -o StrictHostKeyChecking=no target/demo.war ${tomcatUser}@${tomcatIp}:/opt/tomcat8/webapps/"
     stopTomcat = "/opt/tomcat/bin/catalina.sh stop"
     startTomcat ="/opt/tomcat/bin/catalina.sh start"
     copyWar = "cp -o StrictHostKeyChecking=no target/demo.war /opt/tomcat8/webapps/"
 }
 options {
  skipDefaultCheckout()
 }
 stages {
  stage('SCM') {
   steps {
    checkout scm
   }
  }
 stage('Build') {
   parallel {
     stage('Compile & package') {
        steps {
           // sh "${mvnCMD} clean compile"
              sh "${mvnCMD} clean package"
          }
          }
     stage('CheckStyle') {
     steps {
          sh ' ${mvnCMD} checkstyle:checkstyle'
          step([$class: 'CheckStylePublisher',
           //canRunOnFailed: true,
           defaultEncoding: '',
           healthy: '100',
           pattern: '**/target/checkstyle-result.xml',
           unHealthy: '90',
           //useStableBuildAsReference: true
          ])
         }
    }
    }
    }
    stage('Unit Tests') {
    steps {
    sh '${mvnCMD} test'
   }
   post {
    always {
     junit 'target/surefire-reports/**/*.xml'
    }
   }
  }
  stage('SonarQubeReport'){
    steps { 
     sh "${mvnCMD} sonar:sonar"
   }
    }
   stage('Deploy to tomcat'){
    steps { 
     sh 'mv target/demo*.war target/demo.war' 
     
      sshagent(['tomcat_jenkins']) {
        sh "${stopTomcat}"
        sh "${copyWar}"
        sh "${startTomcat}"
	   }
   }
    }
   stage('Build Docker Image'){
    steps { 
    //sh 'docker build -t 172.17.0.2:8083/demo:2.0.0 .'
    sh 'docker build -t 172.31.140.193:8083/demo:2.0.0 .'
   }
   }
   stage('Push Docker Image'){
    steps { 
     sh "docker login -u admin -p 6197 172.17.0.2:8083" 
     sh 'docker push 172.31.140.193:8083/demo:2.0.0'
     }
   }
    }
 }
